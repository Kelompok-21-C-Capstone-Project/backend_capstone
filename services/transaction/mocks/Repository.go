// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	dto "backend_capstone/services/transaction/dto"

	mock "github.com/stretchr/testify/mock"

	models "backend_capstone/models"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AdminDetailTransaction provides a mock function with given fields: params
func (_m *Repository) AdminDetailTransaction(params ...string) (dto.DashboardDetailTransactionDTO, error) {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 dto.DashboardDetailTransactionDTO
	if rf, ok := ret.Get(0).(func(...string) dto.DashboardDetailTransactionDTO); ok {
		r0 = rf(params...)
	} else {
		r0 = ret.Get(0).(dto.DashboardDetailTransactionDTO)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckProductStock provides a mock function with given fields: pid
func (_m *Repository) CheckProductStock(pid string) (*models.Product, error) {
	ret := _m.Called(pid)

	var r0 *models.Product
	if rf, ok := ret.Get(0).(func(string) *models.Product); ok {
		r0 = rf(pid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *Repository) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *Repository) FindAll() (*[]dto.ClientTransactionsResponse, error) {
	ret := _m.Called()

	var r0 *[]dto.ClientTransactionsResponse
	if rf, ok := ret.Get(0).(func() *[]dto.ClientTransactionsResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]dto.ClientTransactionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *Repository) FindById(id string) (*models.TransactionResponse, error) {
	ret := _m.Called(id)

	var r0 *models.TransactionResponse
	if rf, ok := ret.Get(0).(func(string) *models.TransactionResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TransactionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBillById provides a mock function with given fields: tid
func (_m *Repository) GetBillById(tid string) (dto.BillClient, error) {
	ret := _m.Called(tid)

	var r0 dto.BillClient
	if rf, ok := ret.Get(0).(func(string) dto.BillClient); ok {
		r0 = rf(tid)
	} else {
		r0 = ret.Get(0).(dto.BillClient)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionProduct provides a mock function with given fields: pid
func (_m *Repository) GetTransactionProduct(pid string) (*models.Product, error) {
	ret := _m.Called(pid)

	var r0 *models.Product
	if rf, ok := ret.Get(0).(func(string) *models.Product); ok {
		r0 = rf(pid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserInfo provides a mock function with given fields: tid
func (_m *Repository) GetUserInfo(tid string) (models.UserResponse, error) {
	ret := _m.Called(tid)

	var r0 models.UserResponse
	if rf, ok := ret.Get(0).(func(string) models.UserResponse); ok {
		r0 = rf(tid)
	} else {
		r0 = ret.Get(0).(models.UserResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: data
func (_m *Repository) Insert(data *models.Transaction) (*models.TransactionResponse, error) {
	ret := _m.Called(data)

	var r0 *models.TransactionResponse
	if rf, ok := ret.Get(0).(func(*models.Transaction) *models.TransactionResponse); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TransactionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Transaction) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertPayment provides a mock function with given fields: data
func (_m *Repository) InsertPayment(data *models.Payment) (*models.Payment, error) {
	ret := _m.Called(data)

	var r0 *models.Payment
	if rf, ok := ret.Get(0).(func(*models.Payment) *models.Payment); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Payment) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MidtransUpdate provides a mock function with given fields: tid, status
func (_m *Repository) MidtransUpdate(tid string, status string) error {
	ret := _m.Called(tid, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(tid, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductReStock provides a mock function with given fields: pid
func (_m *Repository) ProductReStock(pid string) error {
	ret := _m.Called(pid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(pid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields:
func (_m *Repository) Update() (*models.TransactionResponse, error) {
	ret := _m.Called()

	var r0 *models.TransactionResponse
	if rf, ok := ret.Get(0).(func() *models.TransactionResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TransactionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersFindAll provides a mock function with given fields: uip, params
func (_m *Repository) UsersFindAll(uip string, params ...string) (int64, *[]dto.ClientTransactionsResponse, error) {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, uip)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, ...string) int64); ok {
		r0 = rf(uip, params...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 *[]dto.ClientTransactionsResponse
	if rf, ok := ret.Get(1).(func(string, ...string) *[]dto.ClientTransactionsResponse); ok {
		r1 = rf(uip, params...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*[]dto.ClientTransactionsResponse)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, ...string) error); ok {
		r2 = rf(uip, params...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UsersFindById provides a mock function with given fields: uid, tid
func (_m *Repository) UsersFindById(uid string, tid string) (*dto.ClientTransactionsResponse, error) {
	ret := _m.Called(uid, tid)

	var r0 *dto.ClientTransactionsResponse
	if rf, ok := ret.Get(0).(func(string, string) *dto.ClientTransactionsResponse); ok {
		r0 = rf(uid, tid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ClientTransactionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(uid, tid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
