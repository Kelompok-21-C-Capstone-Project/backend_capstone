// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	dto "backend_capstone/services/transaction/dto"

	mock "github.com/stretchr/testify/mock"

	models "backend_capstone/models"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AdminDetailTransaction provides a mock function with given fields: params
func (_m *Service) AdminDetailTransaction(params ...string) (dto.DashboardDetailTransactionDTO, error) {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 dto.DashboardDetailTransactionDTO
	if rf, ok := ret.Get(0).(func(...string) dto.DashboardDetailTransactionDTO); ok {
		r0 = rf(params...)
	} else {
		r0 = ret.Get(0).(dto.DashboardDetailTransactionDTO)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: userId, createtransactionDTO
func (_m *Service) Create(userId string, createtransactionDTO dto.CreateTransactionDTO) (dto.BillClient, error) {
	ret := _m.Called(userId, createtransactionDTO)

	var r0 dto.BillClient
	if rf, ok := ret.Get(0).(func(string, dto.CreateTransactionDTO) dto.BillClient); ok {
		r0 = rf(userId, createtransactionDTO)
	} else {
		r0 = ret.Get(0).(dto.BillClient)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, dto.CreateTransactionDTO) error); ok {
		r1 = rf(userId, createtransactionDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *Service) GetAll() ([]dto.ClientTransactionsResponse, error) {
	ret := _m.Called()

	var r0 []dto.ClientTransactionsResponse
	if rf, ok := ret.Get(0).(func() []dto.ClientTransactionsResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.ClientTransactionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBill provides a mock function with given fields: uid, tid
func (_m *Service) GetBill(uid string, tid string) (dto.BillClient, error) {
	ret := _m.Called(uid, tid)

	var r0 dto.BillClient
	if rf, ok := ret.Get(0).(func(string, string) dto.BillClient); ok {
		r0 = rf(uid, tid)
	} else {
		r0 = ret.Get(0).(dto.BillClient)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(uid, tid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *Service) GetById(id string) (models.TransactionResponse, error) {
	ret := _m.Called(id)

	var r0 models.TransactionResponse
	if rf, ok := ret.Get(0).(func(string) models.TransactionResponse); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.TransactionResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MidtransAfterPayment provides a mock function with given fields: midtransData
func (_m *Service) MidtransAfterPayment(midtransData dto.MidtransAfterPayment) error {
	ret := _m.Called(midtransData)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.MidtransAfterPayment) error); ok {
		r0 = rf(midtransData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Modify provides a mock function with given fields:
func (_m *Service) Modify() (models.TransactionResponse, error) {
	ret := _m.Called()

	var r0 models.TransactionResponse
	if rf, ok := ret.Get(0).(func() models.TransactionResponse); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.TransactionResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields:
func (_m *Service) Remove() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersGetAll provides a mock function with given fields: uid, params
func (_m *Service) UsersGetAll(uid string, params ...string) (dto.ResponseUserTransaction, error) {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, uid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 dto.ResponseUserTransaction
	if rf, ok := ret.Get(0).(func(string, ...string) dto.ResponseUserTransaction); ok {
		r0 = rf(uid, params...)
	} else {
		r0 = ret.Get(0).(dto.ResponseUserTransaction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(uid, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersGetById provides a mock function with given fields: uid, tid
func (_m *Service) UsersGetById(uid string, tid string) (dto.ClientTransactionsResponse, error) {
	ret := _m.Called(uid, tid)

	var r0 dto.ClientTransactionsResponse
	if rf, ok := ret.Get(0).(func(string, string) dto.ClientTransactionsResponse); ok {
		r0 = rf(uid, tid)
	} else {
		r0 = ret.Get(0).(dto.ClientTransactionsResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(uid, tid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
