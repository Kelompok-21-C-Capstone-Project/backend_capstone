// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	dto "backend_capstone/services/productcategory/dto"

	mock "github.com/stretchr/testify/mock"

	models "backend_capstone/models"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Create provides a mock function with given fields: createcategoryDTO
func (_m *Service) Create(createcategoryDTO dto.CreateCategoryDTO) (models.ProductCategoryResponse, error) {
	ret := _m.Called(createcategoryDTO)

	var r0 models.ProductCategoryResponse
	if rf, ok := ret.Get(0).(func(dto.CreateCategoryDTO) models.ProductCategoryResponse); ok {
		r0 = rf(createcategoryDTO)
	} else {
		r0 = ret.Get(0).(models.ProductCategoryResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.CreateCategoryDTO) error); ok {
		r1 = rf(createcategoryDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: params
func (_m *Service) GetAll(params ...string) (dto.ResponseBodyProductCategory, error) {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 dto.ResponseBodyProductCategory
	if rf, ok := ret.Get(0).(func(...string) dto.ResponseBodyProductCategory); ok {
		r0 = rf(params...)
	} else {
		r0 = ret.Get(0).(dto.ResponseBodyProductCategory)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *Service) GetById(id string) (models.ProductCategoryResponse, error) {
	ret := _m.Called(id)

	var r0 models.ProductCategoryResponse
	if rf, ok := ret.Get(0).(func(string) models.ProductCategoryResponse); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.ProductCategoryResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Modify provides a mock function with given fields: id, updatecategoryDTO
func (_m *Service) Modify(id string, updatecategoryDTO dto.UpdateCategoryDTO) (models.ProductCategoryResponse, error) {
	ret := _m.Called(id, updatecategoryDTO)

	var r0 models.ProductCategoryResponse
	if rf, ok := ret.Get(0).(func(string, dto.UpdateCategoryDTO) models.ProductCategoryResponse); ok {
		r0 = rf(id, updatecategoryDTO)
	} else {
		r0 = ret.Get(0).(models.ProductCategoryResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, dto.UpdateCategoryDTO) error); ok {
		r1 = rf(id, updatecategoryDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: id
func (_m *Service) Remove(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
